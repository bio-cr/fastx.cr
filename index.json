{"repository_name":"fastx","body":"# Fastx.cr\n\n[![test](https://github.com/bio-cr/fastx.cr/actions/workflows/ci.yml/badge.svg)](https://github.com/bio-cr/fastx.cr/actions/workflows/ci.yml)\n[![Docs Latest](https://img.shields.io/badge/docs-latest-blue.svg)](https://bio-cr.github.io/fastx.cr/)\n\nA Crystal library for reading and writing FASTA and FASTQ files.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     fastx:\n       github: bio-cr/fastx.c\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n### Reading FASTA files\n\n```crystal\nrequire \"fastx\"\n\n# Using Reader directly\nreader = Fastx::Fasta::Reader.new(\"file.fa\")\nreader.each do |name, sequence|\n  puts \"Name: #{name}\"\n  puts \"Sequence: #{sequence.to_s}\"\nend\nreader.close\n\n# Using block (automatically closes)\nFastx::Fasta::Reader.open(\"file.fa\") do |reader|\n  reader.each do |name, sequence|\n    puts \"Name: #{name}\"\n    puts \"Sequence: #{sequence.to_s}\"\n  end\nend\n\n# Using each_copy for String copies (avoids buffer reuse issues)\nFastx::Fasta::Reader.open(\"file.fa\") do |reader|\n  reader.each_copy do |name, sequence|\n    puts \"Name: #{name}\"\n    puts \"Sequence: #{sequence}\" # sequence is already a String\n  end\nend\n```\n\n### Reading FASTQ files\n\n```crystal\n# Using Reader directly\nreader = Fastx::Fastq::Reader.new(\"file.fq\")\nreader.each do |identifier, sequence, quality|\n  puts \"ID: #{identifier}\"\n  puts \"Sequence: #{sequence.to_s}\"\n  puts \"Quality: #{quality.to_s}\"\nend\nreader.close\n\n# Using block (automatically closes)\nFastx::Fastq::Reader.open(\"file.fq\") do |reader|\n  reader.each do |identifier, sequence, quality|\n    puts \"ID: #{identifier}\"\n    puts \"Sequence: #{sequence.to_s}\"\n    puts \"Quality: #{quality.to_s}\"\n  end\nend\n\n# Using each_copy for String copies (avoids buffer reuse issues)\nFastx::Fastq::Reader.open(\"file.fq\") do |reader|\n  reader.each_copy do |identifier, sequence, quality|\n    puts \"ID: #{identifier}\"\n    puts \"Sequence: #{sequence}\" # sequence is already a String\n    puts \"Quality: #{quality}\"   # quality is already a String\n  end\nend\n```\n\n### Writing FASTA files\n\n```crystal\n# Using Writer directly\nwriter = Fastx::Fasta::Writer.new(\"output.fa\")\nwriter.write(\"seq1\", \"ACGTACGT\")\nwriter.write(\"seq2\", \"TGCATGCA\")\nwriter.close\n\n# Using block (automatically closes)\nFastx::Fasta::Writer.open(\"output.fa\") do |writer|\n  writer.write(\"seq1\", \"ACGTACGT\")\n  writer.write(\"seq2\", \"TGCATGCA\")\nend\n```\n\n### Writing FASTQ files\n\n```crystal\n# Using Writer directly\nwriter = Fastx::Fastq::Writer.new(\"output.fq\")\nwriter.write(\"seq1\", \"ACGTACGT\", \"!!!!!!!!\")\nwriter.write(\"seq2\", \"TGCATGCA\", \"~~~~~~~~\")\nwriter.close\n\n# Using block (automatically closes)\nFastx::Fastq::Writer.open(\"output.fq\") do |writer|\n  writer.write(\"seq1\", \"ACGTACGT\", \"!!!!!!!!\")\n  writer.write(\"seq2\", \"TGCATGCA\", \"~~~~~~~~\")\nend\n```\n\n<details>\n<summary>Format detection and specification</summary>\n\n### Format detection by file extension\n\n```crystal\n# Format is inferred from file extension, but type casting is still required\nFastx.open(\"file.fa\") do |reader|\n  reader.as(Fastx::Fasta::Reader).each do |name, sequence|\n    puts \"#{name}: #{sequence.to_s}\"\n  end\nend\n\nFastx.open(\"file.fq\") do |reader|\n  reader.as(Fastx::Fastq::Reader).each do |id, sequence, quality|\n    puts \"#{id}: #{sequence.to_s}\"\n  end\nend\n```\n\n### Explicit format specification\n\n```crystal\n# Using Format enum for explicit format specification\nFastx.open(\"data\", \"r\", Fastx::Format::FASTA) do |reader|\n  reader.as(Fastx::Fasta::Reader).each do |name, sequence|\n    puts \"#{name}: #{sequence.to_s}\"\n  end\nend\n\nFastx.open(\"output\", \"w\", Fastx::Format::FASTQ) do |writer|\n  writer.as(Fastx::Fastq::Writer).write(\"seq1\", \"ACGT\", \"!!!!\")\nend\n```\n\n</details>\n\n### Gzip support\n\nBoth reading and writing of gzip-compressed files are supported automatically when the filename ends with `.gz`.\n\n```crystal\n# Reads gzip-compressed FASTA\nFastx::Fasta::Reader.open(\"file.fa.gz\") do |reader|\n  reader.each do |name, sequence|\n    puts \"#{name}: #{sequence.to_s}\"\n  end\nend\n\n# Writes gzip-compressed FASTQ\nFastx::Fastq::Writer.open(\"output.fq.gz\") do |writer|\n  writer.write(\"seq1\", \"ACGT\", \"!!!!\")\nend\n```\n\nNote: Gzip refers to standard gzip, not BGZF (bgzip)\n\n### Base encoding\n\nConvert DNA sequences to UInt8 arrays suitable for byte-wise or array processing:\n\n```crystal\n# Encode bases to UInt8 array (A,C,G,T,N → 65,67,71,84,78; others → 78)\nencoded = Fastx.encode_bases(\"AcGtNxyz\")\n# Returns: Slice[65u8, 67u8, 71u8, 84u8, 78u8, 78u8, 78u8, 78u8]\n\n# Decode UInt8 array back to DNA string\ndecoded = Fastx.decode_bases(encoded)\n# Returns: \"ACGTNNNN\"\n```\n\n### Quality encoding\n\nConvert quality strings to Phred score arrays and back:\n\n```crystal\n# Encode quality string to Phred scores (Phred+33 by default)\nphred_scores = Fastx.encode_phred(\"IIIIHGF\") # => [40_u8, 40_u8, 40_u8, 40_u8, 39_u8, 38_u8, 37_u8]\n\n# Decode Phred scores to quality string\nquality_str = Fastx.decode_phred([40_u8, 40_u8, 40_u8, 40_u8, 39_u8, 38_u8, 37_u8]) # => \"IIIIHGF\"\n\n# Specify offset for Phred+64\nphred_scores64 = Fastx.encode_phred(\"dddd\", offset: 64)\nquality_str64 = Fastx.decode_phred([36_u8, 36_u8, 36_u8, 36_u8], offset: 64)\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/bio-cr/fastx/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## License\n\nMIT License\n\nThis project includes code generated by AI.\n","program":{"html_id":"fastx/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"fastx","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"fastx/Fastx","path":"Fastx.html","kind":"module","full_name":"Fastx","name":"Fastx","abstract":false,"locations":[{"filename":"src/fastx.cr","line_number":6,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx.cr#L6"},{"filename":"src/fastx/exceptions.cr","line_number":1,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/exceptions.cr#L1"},{"filename":"src/fastx/fasta.cr","line_number":4,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta.cr#L4"},{"filename":"src/fastx/fasta/reader.cr","line_number":4,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L4"},{"filename":"src/fastx/fasta/writer.cr","line_number":4,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/writer.cr#L4"},{"filename":"src/fastx/fastq.cr","line_number":4,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L4"},{"filename":"src/fastx/fastq/reader.cr","line_number":4,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L4"},{"filename":"src/fastx/fastq/writer.cr","line_number":4,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/writer.cr#L4"},{"filename":"src/fastx/format.cr","line_number":1,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/format.cr#L1"},{"filename":"src/fastx/version.cr","line_number":1,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/version.cr#L1"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /home/runner/work/fastx.cr/fastx.cr/src/fastx`).chomp.stringify }}"}],"class_methods":[{"html_id":"decode_bases(bases:Enumerable(UInt8)):String-class-method","name":"decode_bases","doc":"Converts a UInt8 array (ASCII codes) to a DNA string.","summary":"<p>Converts a UInt8 array (ASCII codes) to a DNA string.</p>","abstract":false,"args":[{"name":"bases","external_name":"bases","restriction":"Enumerable(UInt8)"}],"args_string":"(bases : Enumerable(UInt8)) : String","args_html":"(bases : Enumerable(UInt8)) : String","location":{"filename":"src/fastx.cr","line_number":118,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx.cr#L118"},"def":{"name":"decode_bases","args":[{"name":"bases","external_name":"bases","restriction":"Enumerable(UInt8)"}],"return_type":"String","visibility":"Public","body":"bases.map(&.chr).join"},"external_var":false},{"html_id":"decode_phred(scores:Enumerable(UInt8),offset=33):String-class-method","name":"decode_phred","doc":"Converts an array of Phred scores to a quality string.","summary":"<p>Converts an array of Phred scores to a quality string.</p>","abstract":false,"args":[{"name":"scores","external_name":"scores","restriction":"Enumerable(UInt8)"},{"name":"offset","default_value":"33","external_name":"offset","restriction":""}],"args_string":"(scores : Enumerable(UInt8), offset = 33) : String","args_html":"(scores : Enumerable(UInt8), offset = <span class=\"n\">33</span>) : String","location":{"filename":"src/fastx/fastq.cr","line_number":47,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L47"},"def":{"name":"decode_phred","args":[{"name":"scores","external_name":"scores","restriction":"Enumerable(UInt8)"},{"name":"offset","default_value":"33","external_name":"offset","restriction":""}],"return_type":"String","visibility":"Public","body":"scores.map do |s|\n  (s + offset).chr\nend.join"},"external_var":false},{"html_id":"encode_bases(sequence:IO::Memory|String,*,iupac:Bool=false):Slice(UInt8)-class-method","name":"encode_bases","doc":"Converts a DNA sequence (String or IO::Memory) to a UInt8 slice,\nwhere each base is encoded as a single byte.\nWhen iupac is true, supports IUPAC nucleotide codes (R, Y, S, W, K, M, B, D, H, V).\nWhen iupac is false, only standard bases (A, C, G, T, N) are preserved.\nNon-recognized characters are converted to N (78u8).\nThis representation is suitable for byte-wise or array processing.","summary":"<p>Converts a DNA sequence (String or IO::Memory) to a UInt8 slice, where each base is encoded as a single byte.</p>","abstract":false,"args":[{"name":"sequence","external_name":"sequence","restriction":"IO::Memory | String"},{"name":"","external_name":"","restriction":""},{"name":"iupac","default_value":"false","external_name":"iupac","restriction":"Bool"}],"args_string":"(sequence : IO::Memory | String, *, iupac : Bool = false) : Slice(UInt8)","args_html":"(sequence : IO::Memory | String, *, iupac : Bool = <span class=\"n\">false</span>) : Slice(UInt8)","location":{"filename":"src/fastx.cr","line_number":111,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx.cr#L111"},"def":{"name":"encode_bases","args":[{"name":"sequence","external_name":"sequence","restriction":"IO::Memory | String"},{"name":"","external_name":"","restriction":""},{"name":"iupac","default_value":"false","external_name":"iupac","restriction":"Bool"}],"splat_index":1,"return_type":"Slice(UInt8)","visibility":"Public","body":"sequence.to_slice.map do |c|\n  normalize_base(c, iupac: iupac)\nend"},"external_var":false},{"html_id":"encode_phred(quality:String,offset=33):Array(UInt8)-class-method","name":"encode_phred","doc":"Converts a quality string to an array of Phred scores.","summary":"<p>Converts a quality string to an array of Phred scores.</p>","abstract":false,"args":[{"name":"quality","external_name":"quality","restriction":"String"},{"name":"offset","default_value":"33","external_name":"offset","restriction":""}],"args_string":"(quality : String, offset = 33) : Array(UInt8)","args_html":"(quality : String, offset = <span class=\"n\">33</span>) : Array(UInt8)","location":{"filename":"src/fastx/fastq.cr","line_number":42,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L42"},"def":{"name":"encode_phred","args":[{"name":"quality","external_name":"quality","restriction":"String"},{"name":"offset","default_value":"33","external_name":"offset","restriction":""}],"return_type":"Array(UInt8)","visibility":"Public","body":"quality.chars.map do |c|\n  (c.ord - offset).to_u8\nend"},"external_var":false},{"html_id":"normalize_base(c:UInt8,*,iupac:Bool=false):UInt8-class-method","name":"normalize_base","doc":"Normalizes a single base character to uppercase.\nWhen iupac is true, supports IUPAC nucleotide codes (R, Y, S, W, K, M, B, D, H, V).\nWhen iupac is false, only standard bases (A, C, G, T, N) are preserved.\nNon-recognized characters are converted to N (78u8).","summary":"<p>Normalizes a single base character to uppercase.</p>","abstract":false,"args":[{"name":"c","external_name":"c","restriction":"UInt8"},{"name":"","external_name":"","restriction":""},{"name":"iupac","default_value":"false","external_name":"iupac","restriction":"Bool"}],"args_string":"(c : UInt8, *, iupac : Bool = false) : UInt8","args_html":"(c : UInt8, *, iupac : Bool = <span class=\"n\">false</span>) : UInt8","location":{"filename":"src/fastx.cr","line_number":51,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx.cr#L51"},"def":{"name":"normalize_base","args":[{"name":"c","external_name":"c","restriction":"UInt8"},{"name":"","external_name":"","restriction":""},{"name":"iupac","default_value":"false","external_name":"iupac","restriction":"Bool"}],"splat_index":1,"return_type":"UInt8","visibility":"Public","body":"if standard_base = normalize_standard_base(c)\n  return standard_base\nend\n\n\nif iupac\n  if iupac_base = normalize_iupac_base(c)\n    return iupac_base\n  end\nend\n\n\nreplace_with_n(c)\n"},"external_var":false},{"html_id":"open(filename:Path|String,mode=\"r\",format:Format|Nil=nil,&)-class-method","name":"open","doc":"Opens a FASTA/FASTQ file with automatic format detection or explicit format.\nYields the appropriate Reader/Writer to the block and automatically closes it.","summary":"<p>Opens a FASTA/FASTQ file with automatic format detection or explicit format.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"Path | String"},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""},{"name":"format","default_value":"nil","external_name":"format","restriction":"Format | ::Nil"}],"args_string":"(filename : Path | String, mode = \"r\", format : Format | Nil = nil, &)","args_html":"(filename : Path | String, mode = <span class=\"s\">&quot;r&quot;</span>, format : <a href=\"Fastx/Format.html\">Format</a> | Nil = <span class=\"n\">nil</span>, &)","location":{"filename":"src/fastx.cr","line_number":9,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx.cr#L9"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":"Path | String"},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""},{"name":"format","default_value":"nil","external_name":"format","restriction":"Format | ::Nil"}],"yields":1,"block_arity":1,"visibility":"Public","body":"case format\nwhen Format::FASTQ\n  Fastq.open(filename, mode) do |f|\n    yield f\n  end\nwhen Format::FASTA\n  Fasta.open(filename, mode) do |f|\n    yield f\n  end\nelse\n  case filename.to_s\n  when /\\.fastq$/, /\\.fq$/, /\\.fastq.gz$/, /\\.fq.gz$/\n    Fastq.open(filename, mode) do |f|\n      yield f\n    end\n  when /\\.fasta$/, /\\.fa$/, /\\.fasta.gz$/, /\\.fa.gz$/\n    Fasta.open(filename, mode) do |f|\n      yield f\n    end\n  else\n    raise(ArgumentError.new(\"Unknown format: #{filename}\"))\n  end\nend"},"external_var":false},{"html_id":"open(filename:Path|String,mode=\"r\",format:Format|Nil=nil)-class-method","name":"open","doc":"Opens a FASTA/FASTQ file with automatic format detection or explicit format.\nReturns the appropriate Reader/Writer instance (manual close required).","summary":"<p>Opens a FASTA/FASTQ file with automatic format detection or explicit format.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"Path | String"},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""},{"name":"format","default_value":"nil","external_name":"format","restriction":"Format | ::Nil"}],"args_string":"(filename : Path | String, mode = \"r\", format : Format | Nil = nil)","args_html":"(filename : Path | String, mode = <span class=\"s\">&quot;r&quot;</span>, format : <a href=\"Fastx/Format.html\">Format</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/fastx.cr","line_number":29,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx.cr#L29"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":"Path | String"},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""},{"name":"format","default_value":"nil","external_name":"format","restriction":"Format | ::Nil"}],"visibility":"Public","body":"case format\nwhen Format::FASTQ\n  Fastq.open(filename, mode)\nwhen Format::FASTA\n  Fasta.open(filename, mode)\nelse\n  case filename.to_s\n  when /\\.fastq$/, /\\.fq$/, /\\.fastq.gz$/, /\\.fq.gz$/\n    Fastq.open(filename, mode)\n  when /\\.fasta$/, /\\.fa$/, /\\.fasta.gz$/, /\\.fa.gz$/\n    Fasta.open(filename, mode)\n  else\n    raise(ArgumentError.new(\"Unknown format: #{filename}\"))\n  end\nend"},"external_var":false}],"types":[{"html_id":"fastx/Fastx/Fasta","path":"Fastx/Fasta.html","kind":"module","full_name":"Fastx::Fasta","name":"Fasta","abstract":false,"locations":[{"filename":"src/fastx/fasta.cr","line_number":5,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta.cr#L5"},{"filename":"src/fastx/fasta/reader.cr","line_number":5,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L5"},{"filename":"src/fastx/fasta/writer.cr","line_number":5,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/writer.cr#L5"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fastx/Fastx","kind":"module","full_name":"Fastx","name":"Fastx"},"class_methods":[{"html_id":"open(filename,mode=\"r\",&)-class-method","name":"open","doc":"Opens a FASTA file for reading (\"r\") or writing (\"w\").\nYields the Reader/Writer to the block and automatically closes it.","summary":"<p>Opens a FASTA file for reading (&quot;r&quot;) or writing (&quot;w&quot;).</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""}],"args_string":"(filename, mode = \"r\", &)","args_html":"(filename, mode = <span class=\"s\">&quot;r&quot;</span>, &)","location":{"filename":"src/fastx/fasta.cr","line_number":8,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta.cr#L8"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"case mode\nwhen \"r\"\n  Reader.open(filename) do |reader|\n    yield reader\n  end\nwhen \"w\"\n  Writer.open(filename) do |writer|\n    yield writer\n  end\nelse\n  raise(ArgumentError.new(\"Invalid mode: #{mode}\"))\nend"},"external_var":false},{"html_id":"open(filename,mode=\"r\")-class-method","name":"open","doc":"Opens a FASTA file for reading (\"r\") or writing (\"w\").\nReturns the Reader/Writer instance (manual close required).","summary":"<p>Opens a FASTA file for reading (&quot;r&quot;) or writing (&quot;w&quot;).</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""}],"args_string":"(filename, mode = \"r\")","args_html":"(filename, mode = <span class=\"s\">&quot;r&quot;</span>)","location":{"filename":"src/fastx/fasta.cr","line_number":21,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta.cr#L21"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""}],"visibility":"Public","body":"case mode\nwhen \"r\"\n  Reader.new(filename)\nwhen \"w\"\n  Writer.new(filename)\nelse\n  raise(ArgumentError.new(\"Invalid mode: #{mode}\"))\nend"},"external_var":false}],"types":[{"html_id":"fastx/Fastx/Fasta/Reader","path":"Fastx/Fasta/Reader.html","kind":"class","full_name":"Fastx::Fasta::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/fasta/reader.cr","line_number":6,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L6"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fastx/Fastx/Fasta","kind":"module","full_name":"Fastx::Fasta","name":"Fasta"},"class_methods":[{"html_id":"open(filename:String|Path,&)-class-method","name":"open","doc":"Opens a FASTA file, yields the reader to the block, and automatically closes it.","summary":"<p>Opens a FASTA file, yields the reader to the block, and automatically closes it.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path, &)","args_html":"(filename : String | Path, &)","location":{"filename":"src/fastx/fasta/reader.cr","line_number":12,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L12"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"yields":1,"block_arity":1,"visibility":"Public","body":"begin\n  reader = self.new(filename)\n  yield reader\nensure\n  reader.try(&.close)\nend"},"external_var":false}],"constructors":[{"html_id":"new(filename:String|Path)-class-method","name":"new","doc":"Creates a new FASTA reader for the specified file.\nAutomatically detects gzip compression from .gz extension.","summary":"<p>Creates a new FASTA reader for the specified file.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path)","args_html":"(filename : String | Path)","location":{"filename":"src/fastx/fasta/reader.cr","line_number":21,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L21"},"def":{"name":"new","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"visibility":"Public","body":"_ = allocate\n_.initialize(filename)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"close-instance-method","name":"close","doc":"Closes the file handle.","summary":"<p>Closes the file handle.</p>","abstract":false,"location":{"filename":"src/fastx/fasta/reader.cr","line_number":86,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L86"},"def":{"name":"close","visibility":"Public","body":"@file.close"},"external_var":false},{"html_id":"closed?-instance-method","name":"closed?","doc":"Returns true if the file handle is closed.","summary":"<p>Returns true if the file handle is closed.</p>","abstract":false,"location":{"filename":"src/fastx/fasta/reader.cr","line_number":91,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L91"},"def":{"name":"closed?","visibility":"Public","body":"@file.closed?"},"external_var":false},{"html_id":"each(&)-instance-method","name":"each","doc":"Iterates over each FASTA record, yielding name and sequence.","summary":"<p>Iterates over each FASTA record, yielding name and sequence.</p>","abstract":false,"location":{"filename":"src/fastx/fasta/reader.cr","line_number":28,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L28"},"def":{"name":"each","yields":2,"block_arity":2,"visibility":"Public","body":"file = @gzip ? Compress::Gzip::Reader.new(@file) : @file\nif file.nil?\n  return\nend\n\nname = nil\nsequence = IO::Memory.new\n\nfile.each_line do |line|\n  if line.starts_with?(\">\")\n    if name.nil?\n    else\n      yield name, sequence\n    end\n\n    name = line[1..-1]\n\n\n\n    sequence.clear\n  else\n    if !line.ascii_only?\n      raise(InvalidCharacterError.new(@filename, name, sequence))\n    end\n    sequence << line\n  end\nend\nif name.nil?\nelse\n  yield name, sequence\nend\n\nif file.is_a?(Compress::Gzip::Reader)\n  file.close\nend\n"},"external_var":false},{"html_id":"each_copy(&)-instance-method","name":"each_copy","doc":"Iterates over each FASTA record, yielding name and sequence as String copies.\nThis avoids buffer reuse issues when references to sequence data are kept.","summary":"<p>Iterates over each FASTA record, yielding name and sequence as String copies.</p>","abstract":false,"location":{"filename":"src/fastx/fasta/reader.cr","line_number":59,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/reader.cr#L59"},"def":{"name":"each_copy","yields":2,"block_arity":2,"visibility":"Public","body":"file = @gzip ? Compress::Gzip::Reader.new(@file) : @file\nif file.nil?\n  return\nend\n\nname = nil\nsequence = IO::Memory.new\n\nfile.each_line do |line|\n  if line.starts_with?(\">\")\n    if name.nil?\n    else\n      yield name, sequence.to_s\n    end\n\n    name = line[1..-1]\n    sequence.clear\n  else\n    if !line.ascii_only?\n      raise(InvalidCharacterError.new(@filename, name, sequence))\n    end\n    sequence << line\n  end\nend\nif name.nil?\nelse\n  yield name, sequence.to_s\nend\n\nif file.is_a?(Compress::Gzip::Reader)\n  file.close\nend\n"},"external_var":false}]},{"html_id":"fastx/Fastx/Fasta/Writer","path":"Fastx/Fasta/Writer.html","kind":"class","full_name":"Fastx::Fasta::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/fasta/writer.cr","line_number":6,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/writer.cr#L6"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fastx/Fastx/Fasta","kind":"module","full_name":"Fastx::Fasta","name":"Fasta"},"class_methods":[{"html_id":"open(filename:String|Path,&)-class-method","name":"open","doc":"Opens a FASTA file for writing, yields the writer to the block, and automatically closes it.","summary":"<p>Opens a FASTA file for writing, yields the writer to the block, and automatically closes it.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path, &)","args_html":"(filename : String | Path, &)","location":{"filename":"src/fastx/fasta/writer.cr","line_number":13,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/writer.cr#L13"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"yields":1,"block_arity":1,"visibility":"Public","body":"begin\n  writer = self.new(filename)\n  yield writer\nensure\n  writer.try(&.close)\nend"},"external_var":false}],"constructors":[{"html_id":"new(filename:String|Path)-class-method","name":"new","doc":"Creates a new FASTA writer for the specified file.\nAutomatically detects gzip compression from .gz extension.","summary":"<p>Creates a new FASTA writer for the specified file.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path)","args_html":"(filename : String | Path)","location":{"filename":"src/fastx/fasta/writer.cr","line_number":22,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/writer.cr#L22"},"def":{"name":"new","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"visibility":"Public","body":"_ = allocate\n_.initialize(filename)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"close-instance-method","name":"close","doc":"Closes the file handle.","summary":"<p>Closes the file handle.</p>","abstract":false,"location":{"filename":"src/fastx/fasta/writer.cr","line_number":36,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/writer.cr#L36"},"def":{"name":"close","visibility":"Public","body":"if @writer.is_a?(Compress::Gzip::Writer)\n  @writer.close\nend\n@file.close\n"},"external_var":false},{"html_id":"closed?-instance-method","name":"closed?","doc":"Returns true if the file handle is closed.","summary":"<p>Returns true if the file handle is closed.</p>","abstract":false,"location":{"filename":"src/fastx/fasta/writer.cr","line_number":44,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/writer.cr#L44"},"def":{"name":"closed?","visibility":"Public","body":"@file.closed?"},"external_var":false},{"html_id":"write(name:String,sequence:String)-instance-method","name":"write","doc":"Writes a FASTA record with the given name and sequence.","summary":"<p>Writes a FASTA record with the given name and sequence.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"sequence","external_name":"sequence","restriction":"String"}],"args_string":"(name : String, sequence : String)","args_html":"(name : String, sequence : String)","location":{"filename":"src/fastx/fasta/writer.cr","line_number":30,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fasta/writer.cr#L30"},"def":{"name":"write","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"sequence","external_name":"sequence","restriction":"String"}],"visibility":"Public","body":"@writer.puts(\">#{name}\")\n@writer.puts(sequence)\n"},"external_var":false}]}]},{"html_id":"fastx/Fastx/Fastq","path":"Fastx/Fastq.html","kind":"module","full_name":"Fastx::Fastq","name":"Fastq","abstract":false,"locations":[{"filename":"src/fastx/fastq.cr","line_number":5,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L5"},{"filename":"src/fastx/fastq/reader.cr","line_number":5,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L5"},{"filename":"src/fastx/fastq/writer.cr","line_number":5,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/writer.cr#L5"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fastx/Fastx","kind":"module","full_name":"Fastx","name":"Fastx"},"class_methods":[{"html_id":"open(filename,mode=\"r\",&)-class-method","name":"open","doc":"Opens a FASTQ file for reading (\"r\") or writing (\"w\").\nYields the Reader/Writer to the block and automatically closes it.","summary":"<p>Opens a FASTQ file for reading (&quot;r&quot;) or writing (&quot;w&quot;).</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""}],"args_string":"(filename, mode = \"r\", &)","args_html":"(filename, mode = <span class=\"s\">&quot;r&quot;</span>, &)","location":{"filename":"src/fastx/fastq.cr","line_number":16,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L16"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"case mode\nwhen \"r\"\n  Reader.open(filename) do |reader|\n    yield reader\n  end\nwhen \"w\"\n  Writer.open(filename) do |writer|\n    yield writer\n  end\nelse\n  raise(ArgumentError.new(\"Invalid mode: #{mode}\"))\nend"},"external_var":false},{"html_id":"open(filename,mode=\"r\")-class-method","name":"open","doc":"Opens a FASTQ file for reading (\"r\") or writing (\"w\").\nReturns the Reader/Writer instance (manual close required).","summary":"<p>Opens a FASTQ file for reading (&quot;r&quot;) or writing (&quot;w&quot;).</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""}],"args_string":"(filename, mode = \"r\")","args_html":"(filename, mode = <span class=\"s\">&quot;r&quot;</span>)","location":{"filename":"src/fastx/fastq.cr","line_number":29,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L29"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"mode","default_value":"\"r\"","external_name":"mode","restriction":""}],"visibility":"Public","body":"case mode\nwhen \"r\"\n  Reader.new(filename)\nwhen \"w\"\n  Writer.new(filename)\nelse\n  raise(ArgumentError.new(\"Invalid mode: #{mode}\"))\nend"},"external_var":false}],"types":[{"html_id":"fastx/Fastx/Fastq/FIELD","path":"Fastx/Fastq/FIELD.html","kind":"enum","full_name":"Fastx::Fastq::FIELD","name":"FIELD","abstract":false,"ancestors":[{"html_id":"fastx/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"fastx/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"fastx/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/fastq.cr","line_number":7,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L7"}],"repository_name":"fastx","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"IDENTIFIER","name":"IDENTIFIER","value":"0_u8"},{"id":"SEQUENCE","name":"SEQUENCE","value":"1_u8"},{"id":"PLUS","name":"PLUS","value":"2_u8"},{"id":"QUALITY","name":"QUALITY","value":"3_u8"}],"namespace":{"html_id":"fastx/Fastx/Fastq","kind":"module","full_name":"Fastx::Fastq","name":"Fastq"},"doc":"FASTQ record field types for parsing state machine.","summary":"<p>FASTQ record field types for parsing state machine.</p>","instance_methods":[{"html_id":"identifier?-instance-method","name":"identifier?","doc":"Returns `true` if this enum value equals `IDENTIFIER`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Fastx/Fastq/FIELD.html#IDENTIFIER\">IDENTIFIER</a></code></p>","abstract":false,"location":{"filename":"src/fastx/fastq.cr","line_number":8,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L8"},"def":{"name":"identifier?","visibility":"Public","body":"self == IDENTIFIER"},"external_var":false},{"html_id":"plus?-instance-method","name":"plus?","doc":"Returns `true` if this enum value equals `PLUS`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Fastx/Fastq/FIELD.html#PLUS\">PLUS</a></code></p>","abstract":false,"location":{"filename":"src/fastx/fastq.cr","line_number":10,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L10"},"def":{"name":"plus?","visibility":"Public","body":"self == PLUS"},"external_var":false},{"html_id":"quality?-instance-method","name":"quality?","doc":"Returns `true` if this enum value equals `QUALITY`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Fastx/Fastq/FIELD.html#QUALITY\">QUALITY</a></code></p>","abstract":false,"location":{"filename":"src/fastx/fastq.cr","line_number":11,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L11"},"def":{"name":"quality?","visibility":"Public","body":"self == QUALITY"},"external_var":false},{"html_id":"sequence?-instance-method","name":"sequence?","doc":"Returns `true` if this enum value equals `SEQUENCE`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../Fastx/Fastq/FIELD.html#SEQUENCE\">SEQUENCE</a></code></p>","abstract":false,"location":{"filename":"src/fastx/fastq.cr","line_number":9,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq.cr#L9"},"def":{"name":"sequence?","visibility":"Public","body":"self == SEQUENCE"},"external_var":false}]},{"html_id":"fastx/Fastx/Fastq/Reader","path":"Fastx/Fastq/Reader.html","kind":"class","full_name":"Fastx::Fastq::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/fastq/reader.cr","line_number":6,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L6"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fastx/Fastx/Fastq","kind":"module","full_name":"Fastx::Fastq","name":"Fastq"},"class_methods":[{"html_id":"open(filename:String|Path,&)-class-method","name":"open","doc":"Opens a FASTQ file, yields the reader to the block, and automatically closes it.","summary":"<p>Opens a FASTQ file, yields the reader to the block, and automatically closes it.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path, &)","args_html":"(filename : String | Path, &)","location":{"filename":"src/fastx/fastq/reader.cr","line_number":12,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L12"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"yields":1,"block_arity":1,"visibility":"Public","body":"begin\n  reader = self.new(filename)\n  yield reader\nensure\n  reader.try(&.close)\nend"},"external_var":false}],"constructors":[{"html_id":"new(filename:String|Path)-class-method","name":"new","doc":"Creates a new FASTQ reader for the specified file.\nAutomatically detects gzip compression from .gz extension.","summary":"<p>Creates a new FASTQ reader for the specified file.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path)","args_html":"(filename : String | Path)","location":{"filename":"src/fastx/fastq/reader.cr","line_number":21,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L21"},"def":{"name":"new","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"visibility":"Public","body":"_ = allocate\n_.initialize(filename)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"close-instance-method","name":"close","doc":"Closes the file handle.","summary":"<p>Closes the file handle.</p>","abstract":false,"location":{"filename":"src/fastx/fastq/reader.cr","line_number":138,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L138"},"def":{"name":"close","visibility":"Public","body":"@file.close"},"external_var":false},{"html_id":"closed?-instance-method","name":"closed?","doc":"Returns true if the file handle is closed.","summary":"<p>Returns true if the file handle is closed.</p>","abstract":false,"location":{"filename":"src/fastx/fastq/reader.cr","line_number":143,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L143"},"def":{"name":"closed?","visibility":"Public","body":"@file.closed?"},"external_var":false},{"html_id":"each(&)-instance-method","name":"each","doc":"Iterates over each FASTQ record, yielding identifier, sequence, and quality.","summary":"<p>Iterates over each FASTQ record, yielding identifier, sequence, and quality.</p>","abstract":false,"location":{"filename":"src/fastx/fastq/reader.cr","line_number":28,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L28"},"def":{"name":"each","yields":3,"block_arity":3,"visibility":"Public","body":"file = @gzip ? Compress::Gzip::Reader.new(@file) : @file\nif file.nil?\n  return\nend\n\nidentifier = nil\nsequence = IO::Memory.new\nquality = IO::Memory.new\n\nnext_field = FIELD::IDENTIFIER\n\nfile.each_line.with_index do |line, idx|\n  case next_field\n  when FIELD::IDENTIFIER\n    if line.starts_with?(\"@\")\n    else\n      raise(InvalidFormatError.new(@filename, idx, line, \"Identifier line must start with '@'\"))\n    end\n\n    if identifier.nil?\n    else\n      yield(identifier, sequence, quality)\n    end\n\n    identifier = line[1..-1]\n\n\n\n    sequence.clear\n    quality.clear\n    next_field = FIELD::SEQUENCE\n  when FIELD::SEQUENCE\n    if line.ascii_only?\n    else\n      raise(InvalidCharacterError.new(@filename, identifier, sequence))\n    end\n    sequence << line\n    next_field = FIELD::PLUS\n  when FIELD::PLUS\n    if line.starts_with?(\"+\")\n    else\n      raise(InvalidFormatError.new(@filename, idx, line, \"Plus line must start with '+'\"))\n    end\n    next_field = FIELD::QUALITY\n  when FIELD::QUALITY\n    if line.ascii_only?\n    else\n      raise(InvalidCharacterError.new(@filename, identifier, sequence))\n    end\n    quality << line\n    next_field = FIELD::IDENTIFIER\n  end\nend\n\nif identifier.nil?\nelse\n  if identifier.nil?\n  else\n    yield(identifier, sequence, quality)\n  end\n  sequence.clear\n  quality.clear\nend\n\nif file.is_a?(Compress::Gzip::Reader)\n  file.close\nend\n"},"external_var":false},{"html_id":"each_copy(&)-instance-method","name":"each_copy","doc":"Iterates over each FASTQ record, yielding identifier, sequence, and quality as String copies.\nThis avoids buffer reuse issues when references to sequence/quality data are kept.","summary":"<p>Iterates over each FASTQ record, yielding identifier, sequence, and quality as String copies.</p>","abstract":false,"location":{"filename":"src/fastx/fastq/reader.cr","line_number":85,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/reader.cr#L85"},"def":{"name":"each_copy","yields":3,"block_arity":3,"visibility":"Public","body":"file = @gzip ? Compress::Gzip::Reader.new(@file) : @file\nif file.nil?\n  return\nend\n\nidentifier = nil\nsequence = IO::Memory.new\nquality = IO::Memory.new\n\nnext_field = FIELD::IDENTIFIER\n\nfile.each_line.with_index do |line, idx|\n  case next_field\n  when FIELD::IDENTIFIER\n    if line.starts_with?(\"@\")\n    else\n      raise(InvalidFormatError.new(@filename, idx, line, \"Identifier line must start with '@'\"))\n    end\n\n    if identifier.nil?\n    else\n      yield(identifier, sequence.to_s, quality.to_s)\n    end\n\n    identifier = line[1..-1]\n    sequence.clear\n    quality.clear\n    next_field = FIELD::SEQUENCE\n  when FIELD::SEQUENCE\n    if line.ascii_only?\n    else\n      raise(InvalidCharacterError.new(@filename, identifier, sequence))\n    end\n    sequence << line\n    next_field = FIELD::PLUS\n  when FIELD::PLUS\n    if line.starts_with?(\"+\")\n    else\n      raise(InvalidFormatError.new(@filename, idx, line, \"Plus line must start with '+'\"))\n    end\n    next_field = FIELD::QUALITY\n  when FIELD::QUALITY\n    if line.ascii_only?\n    else\n      raise(InvalidCharacterError.new(@filename, identifier, sequence))\n    end\n    quality << line\n    next_field = FIELD::IDENTIFIER\n  end\nend\n\nif identifier.nil?\nelse\n  if identifier.nil?\n  else\n    yield(identifier, sequence.to_s, quality.to_s)\n  end\n  sequence.clear\n  quality.clear\nend\n\nif file.is_a?(Compress::Gzip::Reader)\n  file.close\nend\n"},"external_var":false}]},{"html_id":"fastx/Fastx/Fastq/Writer","path":"Fastx/Fastq/Writer.html","kind":"class","full_name":"Fastx::Fastq::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/fastq/writer.cr","line_number":6,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/writer.cr#L6"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fastx/Fastx/Fastq","kind":"module","full_name":"Fastx::Fastq","name":"Fastq"},"class_methods":[{"html_id":"open(filename:String|Path,&)-class-method","name":"open","doc":"Opens a FASTQ file for writing, yields the writer to the block, and automatically closes it.","summary":"<p>Opens a FASTQ file for writing, yields the writer to the block, and automatically closes it.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path, &)","args_html":"(filename : String | Path, &)","location":{"filename":"src/fastx/fastq/writer.cr","line_number":13,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/writer.cr#L13"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"yields":1,"block_arity":1,"visibility":"Public","body":"begin\n  writer = self.new(filename)\n  yield writer\nensure\n  writer.try(&.close)\nend"},"external_var":false}],"constructors":[{"html_id":"new(filename:String|Path)-class-method","name":"new","doc":"Creates a new FASTQ writer for the specified file.\nAutomatically detects gzip compression from .gz extension.","summary":"<p>Creates a new FASTQ writer for the specified file.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path)","args_html":"(filename : String | Path)","location":{"filename":"src/fastx/fastq/writer.cr","line_number":22,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/writer.cr#L22"},"def":{"name":"new","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"visibility":"Public","body":"_ = allocate\n_.initialize(filename)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"close-instance-method","name":"close","doc":"Closes the file handle.","summary":"<p>Closes the file handle.</p>","abstract":false,"location":{"filename":"src/fastx/fastq/writer.cr","line_number":38,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/writer.cr#L38"},"def":{"name":"close","visibility":"Public","body":"if @writer.is_a?(Compress::Gzip::Writer)\n  @writer.close\nend\n@file.close\n"},"external_var":false},{"html_id":"closed?-instance-method","name":"closed?","doc":"Returns true if the file handle is closed.","summary":"<p>Returns true if the file handle is closed.</p>","abstract":false,"location":{"filename":"src/fastx/fastq/writer.cr","line_number":46,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/writer.cr#L46"},"def":{"name":"closed?","visibility":"Public","body":"@file.closed?"},"external_var":false},{"html_id":"write(identifier:String,sequence:String,quality:String)-instance-method","name":"write","doc":"Writes a FASTQ record with the given identifier, sequence, and quality.","summary":"<p>Writes a FASTQ record with the given identifier, sequence, and quality.</p>","abstract":false,"args":[{"name":"identifier","external_name":"identifier","restriction":"String"},{"name":"sequence","external_name":"sequence","restriction":"String"},{"name":"quality","external_name":"quality","restriction":"String"}],"args_string":"(identifier : String, sequence : String, quality : String)","args_html":"(identifier : String, sequence : String, quality : String)","location":{"filename":"src/fastx/fastq/writer.cr","line_number":30,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/fastq/writer.cr#L30"},"def":{"name":"write","args":[{"name":"identifier","external_name":"identifier","restriction":"String"},{"name":"sequence","external_name":"sequence","restriction":"String"},{"name":"quality","external_name":"quality","restriction":"String"}],"visibility":"Public","body":"@writer.puts(\"@#{identifier}\")\n@writer.puts(sequence)\n@writer.puts(\"+\")\n@writer.puts(quality)\n"},"external_var":false}]}]},{"html_id":"fastx/Fastx/FastxError","path":"Fastx/FastxError.html","kind":"class","full_name":"Fastx::FastxError","name":"FastxError","abstract":false,"superclass":{"html_id":"fastx/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"fastx/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/exceptions.cr","line_number":2,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/exceptions.cr#L2"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"fastx/Fastx/InvalidCharacterError","kind":"class","full_name":"Fastx::InvalidCharacterError","name":"InvalidCharacterError"},{"html_id":"fastx/Fastx/InvalidFormatError","kind":"class","full_name":"Fastx::InvalidFormatError","name":"InvalidFormatError"}],"namespace":{"html_id":"fastx/Fastx","kind":"module","full_name":"Fastx","name":"Fastx"}},{"html_id":"fastx/Fastx/Format","path":"Fastx/Format.html","kind":"enum","full_name":"Fastx::Format","name":"Format","abstract":false,"ancestors":[{"html_id":"fastx/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"fastx/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"fastx/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/format.cr","line_number":2,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/format.cr#L2"}],"repository_name":"fastx","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"FASTA","name":"FASTA","value":"0"},{"id":"FASTQ","name":"FASTQ","value":"1"}],"namespace":{"html_id":"fastx/Fastx","kind":"module","full_name":"Fastx","name":"Fastx"},"instance_methods":[{"html_id":"fasta?-instance-method","name":"fasta?","doc":"Returns `true` if this enum value equals `FASTA`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fastx/Format.html#FASTA\">FASTA</a></code></p>","abstract":false,"location":{"filename":"src/fastx/format.cr","line_number":3,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/format.cr#L3"},"def":{"name":"fasta?","visibility":"Public","body":"self == FASTA"},"external_var":false},{"html_id":"fastq?-instance-method","name":"fastq?","doc":"Returns `true` if this enum value equals `FASTQ`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../Fastx/Format.html#FASTQ\">FASTQ</a></code></p>","abstract":false,"location":{"filename":"src/fastx/format.cr","line_number":4,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/format.cr#L4"},"def":{"name":"fastq?","visibility":"Public","body":"self == FASTQ"},"external_var":false}]},{"html_id":"fastx/Fastx/InvalidCharacterError","path":"Fastx/InvalidCharacterError.html","kind":"class","full_name":"Fastx::InvalidCharacterError","name":"InvalidCharacterError","abstract":false,"superclass":{"html_id":"fastx/Fastx/FastxError","kind":"class","full_name":"Fastx::FastxError","name":"FastxError"},"ancestors":[{"html_id":"fastx/Fastx/FastxError","kind":"class","full_name":"Fastx::FastxError","name":"FastxError"},{"html_id":"fastx/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/exceptions.cr","line_number":5,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/exceptions.cr#L5"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fastx/Fastx","kind":"module","full_name":"Fastx","name":"Fastx"},"constructors":[{"html_id":"new(filename,name,sequence)-class-method","name":"new","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"name","external_name":"name","restriction":""},{"name":"sequence","external_name":"sequence","restriction":""}],"args_string":"(filename, name, sequence)","args_html":"(filename, name, sequence)","location":{"filename":"src/fastx/exceptions.cr","line_number":6,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/exceptions.cr#L6"},"def":{"name":"new","args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"name","external_name":"name","restriction":""},{"name":"sequence","external_name":"sequence","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(filename, name, sequence)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"fastx/Fastx/InvalidFormatError","path":"Fastx/InvalidFormatError.html","kind":"class","full_name":"Fastx::InvalidFormatError","name":"InvalidFormatError","abstract":false,"superclass":{"html_id":"fastx/Fastx/FastxError","kind":"class","full_name":"Fastx::FastxError","name":"FastxError"},"ancestors":[{"html_id":"fastx/Fastx/FastxError","kind":"class","full_name":"Fastx::FastxError","name":"FastxError"},{"html_id":"fastx/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"fastx/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fastx/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fastx/exceptions.cr","line_number":16,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/exceptions.cr#L16"}],"repository_name":"fastx","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fastx/Fastx","kind":"module","full_name":"Fastx","name":"Fastx"},"constructors":[{"html_id":"new(filename,idx,line,message=nil)-class-method","name":"new","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"idx","external_name":"idx","restriction":""},{"name":"line","external_name":"line","restriction":""},{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"args_string":"(filename, idx, line, message = nil)","args_html":"(filename, idx, line, message = <span class=\"n\">nil</span>)","location":{"filename":"src/fastx/exceptions.cr","line_number":17,"url":"https://github.com/bio-cr/fastx.cr/blob/b8035348688704ce0f97e5a7b8b2b081c494ca60/src/fastx/exceptions.cr#L17"},"def":{"name":"new","args":[{"name":"filename","external_name":"filename","restriction":""},{"name":"idx","external_name":"idx","restriction":""},{"name":"line","external_name":"line","restriction":""},{"name":"message","default_value":"nil","external_name":"message","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(filename, idx, line, message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]}]}]}}